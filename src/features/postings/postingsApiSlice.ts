import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"

export type location = {
  id?: string
  city: string
  region: string
  country: string
  remote: boolean
}

export type department = {
  id: string
  label: string
}

export type Posting = {
  id: string
  name: string
  uuid: string
  jobAdId: string
  remote: boolean
  defaultJobAd: boolean
  refNumber: string
  company: {
    identifier: string
    name: string
  }
  releasedDate: string
  location: location
  industry: {
    id: string
    label: string
  }
  department: department
  function: {
    id: string
    label: string
  }
  typeOfEmployment: {
    id: string
    label: string
  }
  experienceLevel: {
    id: string
    label: string
  }
  ref: string
  language: {
    code: string
    label: string
    labelNative: string
  }
}

interface PostingsApiResponse {
  content: Posting[]
  total: number
  skip: number
  limit: number
}

// Define a service using a base URL and expected endpoints
export const postingsApiSlice = createApi({
  baseQuery: fetchBaseQuery({
    baseUrl:
      "https://api.smartrecruiters.com/v1/companies/smartrecruiters/",
  }),
  reducerPath: "postingsApi",
  tagTypes: ["Postings"],
  endpoints: build => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getPostings: build.query<PostingsApiResponse, number>({
      query: () => '/postings',
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, id) => [{ type: "Postings", id }],
    }),
  }),
})

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useGetPostingsQuery } = postingsApiSlice
